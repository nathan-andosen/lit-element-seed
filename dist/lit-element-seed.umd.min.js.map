{"version":3,"file":"lit-element-seed.umd.min.js","sources":["../node_modules/tslib/tslib.es6.js","../node_modules/lit-html/lib/directive.js","../node_modules/lit-html/lib/dom.js","../node_modules/lit-html/lib/template.js","../node_modules/lit-html/lib/parts.js","../node_modules/lit-html/lib/part.js","../node_modules/lit-html/lib/template-instance.js","../node_modules/lit-html/lib/template-result.js","../node_modules/lit-html/lib/default-template-processor.js","../node_modules/lit-html/lib/template-factory.js","../node_modules/lit-html/lib/render.js","../node_modules/lit-html/lit-html.js","../node_modules/lit-html/lib/modify-template.js","../node_modules/lit-html/lib/shady-render.js","../node_modules/regenerator-runtime/runtime.js","../node_modules/lit-element/lib/updating-element.js","../node_modules/lit-element/lib/decorators.js","../node_modules/lit-element/lib/css-tag.js","../node_modules/lit-element/lit-element.js","../src/components/status-alert/status-alert.template.ts","../node_modules/@thenja/decorators/dist/event.js","../src/components/status-alert/status-alert.component.ts","../src/components/utilities/inject-style-into-head.ts","../src/components/fancy-button/fancy-button.component.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\n\nexport { __assign, __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter, __decorate, __exportStar, __extends, __generator, __importDefault, __importStar, __makeTemplateObject, __metadata, __param, __read, __rest, __spread, __spreadArrays, __values };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template's underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement('template');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection and if one is pending connection the\n        // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n        // update, otherwise requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst legacyCustomElement = (tagName, clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason.\n    // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n    // applied to elements however.\n    // tslint:disable-next-line:no-any\n    return clazz;\n};\nconst standardCustomElement = (tagName, descriptor) => {\n    const { kind, elements } = descriptor;\n    return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz) {\n            window.customElements.define(tagName, clazz);\n        }\n    };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n */\nexport const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\nconst standardProperty = (options, element) => {\n    // When decorating an accessor, pass it through and add property metadata.\n    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n    // stomp over the user's accessor.\n    if (element.kind === 'method' && element.descriptor &&\n        !('value' in element.descriptor)) {\n        return Object.assign({}, element, { finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            } });\n    }\n    else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n            kind: 'field',\n            key: Symbol(),\n            placement: 'own',\n            descriptor: {},\n            // When @babel/plugin-proposal-decorators implements initializers,\n            // do this instead of the initializer below. See:\n            // https://github.com/babel/babel/issues/9260 extras: [\n            //   {\n            //     kind: 'initializer',\n            //     placement: 'own',\n            //     initializer: descriptor.initializer,\n            //   }\n            // ],\n            initializer() {\n                if (typeof element.initializer === 'function') {\n                    this[element.key] = element.initializer.call(this);\n                }\n            },\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            }\n        };\n    }\n};\nconst legacyProperty = (options, proto, name) => {\n    proto.constructor\n        .createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * @ExportDecoratedItems\n */\nexport function property(options) {\n    // tslint:disable-next-line:no-any decorator\n    return (protoOrDescriptor, name) => (name !== undefined) ?\n        legacyProperty(options, protoOrDescriptor, name) :\n        standardProperty(options, protoOrDescriptor);\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function query(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function queryAll(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelectorAll(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\nconst legacyQuery = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nconst standardQuery = (descriptor, element) => ({\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n});\nconst standardEventOptions = (options, element) => {\n    return Object.assign({}, element, { finisher(clazz) {\n            Object.assign(clazz.prototype[element.key], options);\n        } });\n};\nconst legacyEventOptions = \n// tslint:disable-next-line:no-any legacy decorator\n(options, proto, name) => {\n    Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options) => \n// Return value typed as any to prevent TypeScript from complaining that\n// standard decorator function signature does not match TypeScript decorator\n// signature\n// TODO(kschaaf): unclear why it was only failing on this decorator and not\n// the others\n((protoOrDescriptor, name) => (name !== undefined) ?\n    legacyEventOptions(options, protoOrDescriptor, name) :\n    standardEventOptions(options, protoOrDescriptor));\n//# sourceMappingURL=decorators.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        // The Closure JS Compiler does not always preserve the correct \"this\"\n        // when calling static super methods (b/137460243), so explicitly bind.\n        super.finalize.call(this);\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","import { StatusAlertComponent } from './status-alert.component';\nimport { html } from 'lit-element';\n\n\nconst headerTemplate = (component: StatusAlertComponent) =>\nhtml`\n  <div class=\"header\">\n    <h3 @click=\"${(e) => { component.titleClick.emit(); }}\">\n      ${component.titleLbl}\n    </h3>\n    <button @click=\"${component.closeClick}\">\n      <span class=\"ico-cancel\"></span>\n    </button>\n  </div>\n`;\n\n\n\nexport const mainTemplate = (component: StatusAlertComponent) =>\nhtml`\n  <div class=\"alert-wrapper\">\n    ${headerTemplate(component)}\n    <div class=\"content-body\">\n      <slot></slot>\n    </div>\n  </div>\n`;\n\n\nexport const footerTemplate = (component: StatusAlertComponent) =>\nhtml`\n  <div class=\"footer\">\n    <h6>${component.footerMessage}</h6>\n  </div>\n`;\n","/**\n * Event emitter class to dispatch custom events\n *\n * @export\n * @class CustomEventEmitter\n */\nexport class CustomEventEmitter {\n    constructor(target, options) {\n        this.target = target;\n        this.options = options;\n    }\n    emit(data) {\n        const eventDetails = Object.assign({ detail: data }, this.options);\n        const event = new CustomEvent(eventDetails.eventName, eventDetails);\n        this.target.dispatchEvent(event);\n    }\n}\n/**\n * Event property decorator to easily emit events\n *\n *\n * @param {(string|IEventOptions)} [options]\n * @returns\n */\nexport const event = (options) => {\n    return (target, propertyName) => {\n        /**\n         * Convert camel case to kebab (myEvent becomes my-event)\n         *\n         * @param {*} string\n         * @returns\n         */\n        const camelToKebab = (string) => {\n            return string.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, '$1-$2')\n                .toLowerCase();\n        };\n        // do not use arrow function for getter, as this is the instance of the\n        // class\n        const getter = function () {\n            let eventOptions;\n            if (typeof options === 'string') {\n                eventOptions = { eventName: options };\n            }\n            else if (options) {\n                eventOptions = options;\n            }\n            else {\n                eventOptions = {};\n            }\n            if (!eventOptions.eventName) {\n                eventOptions.eventName = camelToKebab(propertyName);\n            }\n            return new CustomEventEmitter(this, eventOptions);\n        };\n        // do not use arrow function for setter, as this is the instance of the\n        // class\n        const setter = function (newVal) { };\n        // delete the property and re-assign it\n        if (delete target[propertyName]) {\n            Object.defineProperty(target, propertyName, {\n                get: getter,\n                set: setter,\n                enumerable: false,\n                configurable: false\n            });\n        }\n    };\n};\n","import {\n  LitElement,\n  html,\n  customElement,\n  property,\n  css,\n  unsafeCSS\n} from 'lit-element';\nimport style from './status-alert.style.scss';\nimport fontFaceStyle from './assets/icon-font/font-face.scss';\nimport { injectStyleIntoHead } from '../utilities';\nimport { mainTemplate, footerTemplate } from './status-alert.template';\nimport { event, CustomEventEmitter } from '@thenja/decorators';\n\n\n@customElement('status-alert')\nexport class StatusAlertComponent extends LitElement {\n  titleLbl = 'Alert!';\n\n  @property() footerMessage = 'I\\'m the footer';\n  @property() height = 50;\n  @event() close: CustomEventEmitter;\n  @event() titleClick: CustomEventEmitter;\n\n\n  /**\n   * Creates an instance of StatusAlertComponent.\n   *\n   * @memberof StatusAlertComponent\n   */\n  constructor() {\n    super();\n    injectStyleIntoHead(fontFaceStyle);\n  }\n\n\n  connectedCallback() {\n    // if you use custom element functions / hooks, you must use super to call\n    // the parents hook as well\n    super.connectedCallback();\n  }\n\n\n  /**\n   * Use styles this way in your component if you want to take advantage\n   * of lit-element using Constructable Stylesheets. This means the browser\n   * will parse the style sheet only once and re-use it for other instances\n   * of your component, great for performance.\n   * However, if you inject your styles this way, it makes it harder to debug\n   * in the browser.\n   */\n  // static get styles() {\n  //   return unsafeCSS(style);\n  // }\n\n\n\n  /**\n   * Render your html templates.\n   *\n   * Style - You can either inject your styles in here, or use the\n   * static get styles() getter above. If you inject them here, the browser\n   * will parse the css for each instance of all the components on your page.\n   */\n  render() {\n    return html`\n      <style>\n        ${style}\n      </style>\n      ${mainTemplate(this)}\n      ${footerTemplate(this)}\n    `;\n  }\n\n  closeClick(e) {\n    this.close.emit();\n    this.titleLbl = 'Close clicked';\n    this.requestUpdate();\n  }\n}\n","\n/**\n * Inject a string of css styles into a style tag in the head element. This is\n * useful for style like font-face, which do not work in shadow dom's, they\n * must be in the global scope of the page.\n *\n * @param {string} style\n */\nexport const injectStyleIntoHead = (style: string) => {\n  const styleEl = document.createElement('style');\n  styleEl.innerHTML = style;\n  document.head.appendChild(styleEl);\n};\n","import {\n  LitElement,\n  html,\n  customElement,\n  css\n} from 'lit-element';\n\n@customElement('fancy-button')\nexport class FancyButtonComponent extends LitElement {\n\n  static get styles() {\n    return css`\n      button {\n        padding: 1rem;\n        background-color: #ff9900;\n      }\n    `;\n  }\n\n  render() {\n    return html`\n      <button>\n        <slot></slot>\n      </button>\n    `;\n  }\n}\n"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","isDirective","o","directives","has","removeNodes","container","start","end","n","nextSibling","removeChild","Template","result","element","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","node","nextNode","nodeType","hasAttributes","attributes","_length","count","endsWith","name","boundAttributeSuffix","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","markerRegex","push","type","tagName","currentNode","data","indexOf","marker","parent","parentNode","_strings","lastIndex","_i","insert","s","createMarker","match","slice","createTextNode","insertBefore","_parent","previousSibling","_i2","pop","isTemplatePartActive","part","isPrimitive","value","_typeof","isIterable","Array","isArray","Symbol","iterator","WeakMap","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","noChange","nothing","String","Math","random","nodeMarker","RegExp","str","suffix","createComment","TemplateInstance","template","processor","options","__parts","update","this","setValue","_part","commit","_clone","fragment","cloneNode","importNode","nodeIndex","nodeName","_part2","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","commentMarker","TemplateResult","getHTML","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","getTemplateElement","createElement","innerHTML","AttributeCommitter","dirty","_createPart","AttributePart","_getValue","text","v","t","setAttribute","committer","directive","NodePart","__pendingValue","appendInto","startNode","appendChild","endNode","ref","appendIntoPart","__insert","insertAfterPart","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","templateFactory","instance","itemPart","itemParts","item","BooleanAttributePart","Error","PropertyCommitter","single","PropertyPart","eventOptionsSupported","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","_this2","handleEvent","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","__options","getOptions","event","call","defaultTemplateProcessor","prefix","templateCache","templateCaches","get","stringsArray","keyString","Map","set","join","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","prepareTemplateStyles","renderedDOM","shadyRenderSet","add","templateElement","styles","querySelectorAll","condensedStyle","_style","textContent","TEMPLATE_TYPES","templates","Set","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","style","querySelector","nativeShadow","removes","runtime","exports","Op","prototype","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","GenStateSuspendedStart","method","arg","GenStateExecuting","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","done","GenStateSuspendedYield","makeInvokeMethod","fn","obj","err","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","AsyncIterator","previousPromise","callInvokeWithMethodAndArg","Promise","resolve","reject","invoke","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","constructor","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","object","reverse","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function","JSCompiler_renameProperty","prop","_obj","notEqual","old","defaultConverter","toAttribute","Boolean","JSON","stringify","fromAttribute","Number","parse","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","finalized","UpdatingElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","_ensureClassProperties","_classProperties","superProperties","k","createProperty","noAccessor","oldValue","_requestUpdate","configurable","enumerable","finalize","superCtor","_attributeToPropertyMap","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","p","_attributeNameForProperty","_valueHasChanged","_propertyValueFromAttribute","_propertyValueToAttribute","_saveInstanceProperties","_v","_this3","_applyInstanceProperties","_this4","connectedCallback","disconnectedCallback","attributeChangedCallback","_attributeToProperty","_propertyToAttribute","attr","attrValue","propName","shouldRequestUpdate","_hasRequestedUpdate","_enqueueUpdate","requestUpdate","updateComplete","previousUpdatePromise","res","rej","_hasConnected","_this5","performUpdate","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","_getUpdateComplete","size","_this6","_this7","HTMLElement","customElement","classOrDescriptor","clazz","define","legacyCustomElement","descriptor","kind","elements","finisher","standardCustomElement","property","protoOrDescriptor","proto","legacyProperty","placement","initializer","assign","standardProperty","css","cssText","reduce","acc","idx","CSSResult","textFromCSSResult","constructionToken","supportsAdoptingStyleSheets","Document","CSSStyleSheet","safeToken","_styleSheet","replaceSync","flattenStyles","flat","Infinity","arrayFlat","LitElement","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","map","styleSheet","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","hasUpdated","styleElement","templateResult","render","_this","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","litRender","cacheKey","shadyTemplateFactory","delete","mainTemplate","component","titleClick","emit","titleLbl","closeClick","headerTemplate","propertyName","eventOptions","string","replace","camelToKebab","CustomEventEmitter","newVal","eventDetails","detail","CustomEvent","dispatchEvent","styleEl","head","injectStyleIntoHead","footerMessage","footerTemplate","close","StatusAlertComponent","FancyButtonComponent"],"mappings":"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"}